// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// File: prisma/schema.prisma (Version 3.1 - Corrected)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String     @id // Clerk User ID
  email      String     @unique
  name       String?
  categories Category[]
  projects   Project[]
  entries    Entry[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  categoryId     String    @id @default(cuid())
  name           String
  userId         String
  user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  projects       Project[]
  entries        Entry[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Project {
  projectId     String   @id @default(cuid())
  name          String
  userId        String
  user          User     @relation(fields: [userId], references: [userId])
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  entries       Entry[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Entry {
  entryId    String   @id @default(cuid())
  content    String   @db.Text // 告诉PostgreSQL存储没有长度限制、理论上可以无限长的文本
  timestamp  DateTime
  mood       String?
  images     Image[]
  userId     String
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)

  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [projectId], onDelete: SetNull)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Image {
  imageId   String   @id @default(cuid())
  url       String
  entryId   String
  entry     Entry    @relation(fields: [entryId], references: [entryId], onDelete: Cascade)
  createdAt DateTime @default(now())
}